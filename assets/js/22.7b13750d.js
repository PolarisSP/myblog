(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{573:function(t,a,s){"use strict";s.r(a);var e=s(4),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("Optional是jdk8引入的新特性。在此之前，程序员们对于调用方法的返回值需要判空，这种需要判断的地方是非常多的。如:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这种判空方式是十分不优雅的，看着代码就十分冗余，所以可以尝试使用Optional来包装方法的返回值，当调用方调用时，直接使用Optional的API方法进行优雅的处理。")]),t._v(" "),s("h2",{attrs:{id:"optional-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#optional-api"}},[t._v("#")]),t._v(" Optional API")]),t._v(" "),s("h3",{attrs:{id:"empty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#empty"}},[t._v("#")]),t._v(" empty()")]),t._v(" "),s("p",[t._v("此方法是返回一个空的Optional对象")]),t._v(" "),s("h3",{attrs:{id:"of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#of"}},[t._v("#")]),t._v(" of()")]),t._v(" "),s("p",[t._v("此方法传入需要包装的对象，返回一个带有包装对象的Optional对象。需要注意的是，此方法如何传入的对象为null，是会抛出异常的。")]),t._v(" "),s("h3",{attrs:{id:"ofnullable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ofnullable"}},[t._v("#")]),t._v(" ofNullable()")]),t._v(" "),s("p",[t._v("此方法传入需要包装的对象，返回一个带有包装对象的Optional对象。 需要注意的是，传入的对象可以为null，也可以不为null，这就是它与of()的区别")]),t._v(" "),s("h3",{attrs:{id:"ispersent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ispersent"}},[t._v("#")]),t._v(" isPersent()")]),t._v(" "),s("p",[t._v("此方法是用来判断Optional对象是否为null的，如何不为null则返回true，否则返回flase。")]),t._v(" "),s("h3",{attrs:{id:"ifpersent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ifpersent"}},[t._v("#")]),t._v(" ifPersent()")]),t._v(" "),s("p",[t._v("此方法传入一个函数接口，当Optional对象不为null时执行此方法。")]),t._v(" "),s("h3",{attrs:{id:"orelse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#orelse"}},[t._v("#")]),t._v(" orElse()")]),t._v(" "),s("p",[t._v("此方法传入一个函数接口，当Optional为null时，返回此值，否则正常返回Optional对象。")]),t._v(" "),s("h3",{attrs:{id:"orelseget"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#orelseget"}},[t._v("#")]),t._v(" orElseGet()")]),t._v(" "),s("p",[t._v("此方法传入一个函数接口，当Optional为null时，返回此值，否则正常返回Optional对象。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("需要特别注意，orElse()中的函数无论Optinal的包装对象是否为null，都会执行，orElseGet()只有当Optional的包装对象为null时，才执行，类似于懒加载。\n在日常实践中，如何传入的是需要执行的函数而不是值，则最好使用orElseGet()")])]),s("h3",{attrs:{id:"orelsethrow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#orelsethrow"}},[t._v("#")]),t._v(" orElseThrow()")]),t._v(" "),s("p",[t._v("此方法传入一个异常，当Optinal包装的对象为null时，则抛出指定的异常。")]),t._v(" "),s("h3",{attrs:{id:"get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" get()")]),t._v(" "),s("p",[t._v("此方法获取Optinal中的对象。但不要直接使用他，如果Optinal为空，他就会抛出"),s("code",[t._v("NoSuchElementException")]),t._v("异常。")]),t._v(" "),s("h3",{attrs:{id:"filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[t._v("#")]),t._v(" filter()")]),t._v(" "),s("p",[t._v("此方法传入一个函数式接口，接口返回"),s("code",[t._v("Boolean")]),t._v("类型参数，用于对Optional对象进行过滤。")]),t._v(" "),s("h3",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map()")]),t._v(" "),s("p",[t._v("此方法传入一个函数式接口，用于对Optional对象进行值变换。")]),t._v(" "),s("h3",{attrs:{id:"flatmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flatmap"}},[t._v("#")]),t._v(" flatMap()")]),t._v(" "),s("p",[t._v("此方法传入一个函数式接口，用于对Optional对象进行值变换。他与map()不同的是参数为stream类型的。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"title"}),s("p",[t._v("Optional 一般使用在返回类型中")])])])}),[],!1,null,null,null);a.default=r.exports}}]);